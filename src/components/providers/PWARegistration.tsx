'use client';

import { useEffect } from 'react';

/**
 * PWA Registration Component
 * 
 * This component handles the registration of the service worker generated by next-pwa.
 * It dynamically imports the next-pwa register script only on the client side and in production.
 */
export function PWARegistration() {
  useEffect(() => {
    // Only register service worker in production and on client side
    if (
      typeof window !== 'undefined' && 
      'serviceWorker' in navigator &&
      process.env.NODE_ENV === 'production'
    ) {
      // Dynamically import and register the service worker
      import('next-pwa/register')
        .then(() => {
          console.log('PWA service worker registration initiated');
          
          // Add Workbox event listeners if window.workbox is available
          const checkWorkbox = () => {
            if ((window as any).workbox) {
              const workbox = (window as any).workbox;
              
              // Listen for service worker installed event
              workbox.addEventListener('installed', (event: any) => {
                console.log('Service worker installed:', event);
                if (event.isUpdate) {
                  console.log('Service worker updated');
                } else {
                  console.log('Service worker installed for the first time');
                }
              });

              // Listen for service worker waiting event
              workbox.addEventListener('waiting', (event: any) => {
                console.log('Service worker waiting for activation:', event);
              });

              // Listen for service worker controlling event (activated)
              workbox.addEventListener('controlling', (event: any) => {
                console.log('Service worker is now controlling the app:', event);
              });

              // Listen for service worker activated event
              workbox.addEventListener('activated', (event: any) => {
                console.log('Service worker activated:', event);
              });
            } else {
              // Workbox not available yet, try again in a moment
              setTimeout(checkWorkbox, 100);
            }
          };

          // Start checking for workbox after a brief delay
          setTimeout(checkWorkbox, 100);
        })
        .catch((error) => {
          console.warn('PWA service worker registration failed:', error);
        });
    }
  }, []);

  // This component doesn't render anything
  return null;
}